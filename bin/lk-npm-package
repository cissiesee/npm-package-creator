#!/usr/bin/env node

var program = require('commander');
var fs = require('fs-extra');
var os = require('os');
var path = require('path');
var readline = require('readline');
var util = require('util');
var ejs = require("ejs");
var colors = require("colors");
var _ = require("lodash");

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var programOptions;

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

program
	.version(version, '    --version')
	.option('-f, --force', 'force on non-empty directory')
	.option("-n, --packageName <string>", "package name")
	.option("-d, --dir <string>", "directory specified")
	.option("-a, --author <string>", "author name")
	.parse(process.argv);

if (!exit.exited) {
	main();
}

function main() {
	programOptions = _.extend(
		{
			packageName: "npm-package",
			author: "linkage",
			dir: "."
		},
		program
	);

	// Path
	var destinationPath = programOptions.dir;//program.args.shift() || '.';

	// App name
	var appName = path.basename(path.resolve(destinationPath));

	isDirectoryEmpty(destinationPath, function (empty) {
		if (empty || program.force) {
			createApplication(appName, destinationPath);
		} else {
			confirm('destination is not empty, continue? [y/N] ', function (ok) {
				if (ok) {
					process.stdin.destroy();
					createApplication(appName);
				} else {
					console.error('aborting');
					exit(1);
				}
			});
		}
	});
}

function createApplication(app_name) {
	mkdir(".", function (err) {
		if (err) {
			console.error("mkdir " + destinationPath + ": ", err);
		} else {
			writeFile("/package.json", "./dynamic/package.json", programOptions);
			writeFile("/README.md", "./dynamic/README.md", programOptions);
			copyFile(".", "./app", function (err) {
				if (err) {
					console.log("copy app: ", err);
				} else {
					console.log("Successfull! app is created! Start with README.md!".green);
				}
			});
		}
	});
}

function capitalize(str) {
	return str[0].toUpperCase() + str.substr(1);
}

// dir以目标根地址为参照
function mkdir(dir, callback) {
	fs.mkdir(path.join(programOptions.dir, dir), function (err) {
		callback(err);
	});
}

// destFile以目标根地址为参照
// srcFile以源地址template目录为参照
function copyFile(destFile, srcFile, callback) {
	fs.copy(path.join(__dirname, "..", "template", srcFile), path.join(programOptions.dir, destFile), function (err) {
		callback(err);
	});
}

// destFile以目标根地址为参照
// srcFile以源地址template目录为参照
function writeFile(destFile, srcFile, data) {
	var srcFileContent = fs.readFileSync(path.join(__dirname, "../template", srcFile)).toString();
	fs.writeFileSync(path.join(programOptions.dir, destFile), data ? ejs.render(srcFileContent, data) : srcFileContent);
}

// destFile以目标地址为参照
function isExisted(destFile, callback) {
	fs.exists(path.join(programOptions.dir, destFile), function (isFileExisted) {
		callback(isFileExisted);
	});
}

function confirm(msg, callback) {
	var rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});

	rl.question(msg, function (input) {
		rl.close();
		callback(/^y|yes|ok|true$/i.test(input));
	});
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
	// flush output for Node.js Windows pipe bug
	// https://github.com/joyent/node/issues/6247 is just one bug example
	// https://github.com/visionmedia/mocha/issues/333 has a good discussion
	function done() {
		if (!(draining--)) _exit(code);
	}

	var draining = 0;
	var streams = [process.stdout, process.stderr];

	exit.exited = true;

	streams.forEach(function (stream) {
		// submit empty write request and wait for completion
		draining += 1;
		stream.write('', done);
	});

	done();
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function isDirectoryEmpty(path, fn) {
	fs.readdir(path, function (err, files) {
		if (err && 'ENOENT' != err.code) throw err;
		fn(!files || !files.length);
	});
}